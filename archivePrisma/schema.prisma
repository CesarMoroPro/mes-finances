// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
    id String @default(cuid()) @id //@id définit la primary key
    name String
    firstname String
    email String @unique // un email ne peut être utilisé qu'une seule fois
    emailVerified DateTime?
    password String
    createdAt DateTime @default(now())
    mainCurrency String
    version String
    options String
    paiment String
    isPaid Boolean @default(false)
    darkmode Boolean @default(false)
    accounts      Account[]
    sessions      Session[]
}

model Revenu {
    id String @default(cuid()) @id
    userId String // sera la clé secondaire, qui devra valoir la clé primaire User.id
    categoryRevenu String // sera la clé secondaire qui devra valoir la clé primaire CategoryRevenu.id
    category String 
    label String
    amount Float
    recordAt DateTime // date du revenu définie par le user
    createdAt DateTime // date de création d'une nouvelle ligne revenu
}

model Expense {
    id String @default(cuid()) @id
    userId String // sera la clé secondaire, qui devra valoir la clé primaire User.id
    categoryExpense String // sera la clé secondaire qui devra valoir la clé primaire CategoryExpense.id
    category String
    label String
    amount Float
    recordAt DateTime // date de dépense définie par le user
    createdAd DateTime // date de création d'une nouvelle ligne dépense
}

model Saving {
    id String @default(cuid()) @id
    userId String // sera la clé secondaire, qui devra valoir la clé primaire User.id
    category String
    amount Float
    recordAt DateTime
    createdAd DateTime
}

model RevenuCategorie {
    id String @default(cuid()) @id
    label String
    description String
    createdAt DateTime
}

model ExpenseCategory {
    id String @default(cuid()) @id
    label String
    description String
    createdAt DateTime
}

model Invoice {
    id String @default(cuid()) @id
    userId String // sera la clé secondaire, qui devra valoir la clé primaire User.id
    amount Float
    isPaid Boolean @default(false)
    createdAt DateTime
}

model Currency {
    id String @default(cuid()) @id
    userId String // sera la clé secondaire, qui devra valoir la clé primaire User.id
    label String
    symbol String
    changeRate Float
    createdAd DateTime
    mainCurrency String // sera la clé secondaire qui devra valoir la clé primaire User.mainCurrency
}
